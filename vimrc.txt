
"   __   _(_)_ __ ___  _ __ ___ 
"  \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__ 
"  \_/ |_|_| |_| |_|_|  \___|)
"       -AndiKod 2024-



" --- &:PLUGINS --- :

" If VimPlug not here, download it.
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Actual Plugins list:
call plug#begin()
  Plug 'ap/vim-buftabline'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'sainnhe/vim-color-forest-night'
  Plug 'scrooloose/nerdtree'
  Plug 'ryanoasis/vim-devicons'
  Plug 'PhilRunninger/nerdtree-visual-selection'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'vim-airline/vim-airline'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'wuelnerdotexe/vim-astro'
  Plug 'ap/vim-css-color'
call plug#end()



" --- &:OPTIONS --- 
" {{{

set nocompatible        " Disable Vi back compatibility

" ::indentation
set autoindent 
set smartindent   
set cinoptions     =l1,p0,)50,*50,t0
set expandtab
set smarttab 
set softtabstop    =2
set shiftwidth     =2
set shiftround

" ::backup/swap/info/undo settings
set nobackup
set nowritebackup 
" ...set dirs for swaps & the rest

" ::navigation
set cursorline          " Current line highlight
set foldmethod   =marker
set foldopen    -=hor
set foldopen    +=jump
set foldtext     =pliMe
set incsearch           " incremental searching as we type
set hlsearch            " highlight all search results
set mouse         =a             " Allow Mickey
set scrolloff     =4
set ignorecase
set smartcase
set tagcase       =match 

               
" ::vrac settings (aka misc)
set clipboard     =unnamed  " clipboard yanks?
set hidden                  " Switch buffer without saving  


" ::wildMenu
set wildmenu
set wildmode=longest:full,list:full "Complete longest common string, 
                                    " then list alternatives.
" ::display settings
filetype on               " Enable file type detection
filetype plugin on        " Enable plugins according to filetype
syntax on
" set display     +=lastline
" set laststatus   =2
" set list
" set modeline
" set modeline     =1
" set nosttartofline
" set numberwidth  =1
" set ruler
set number              " Line numbers
set relativenumber
let &t_SI = "\e[6 q"    " Thin cursor for Insert mode 
let &t_EI = "\e[2 q"
set noshowmode          " Don't show the mode, VimAirline does it
set showmatch           " Show parentheses matching
set showcmd             " Show the normalMode command in status bar 
set matchpairs+=<:>     " append pairable chars to the default set '(:),{:},[:]'


" Move that with the next custom commands
" or in the plugins settings zone
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument

" FzF setting
"from: thevaluable.dev/fzf-vim-integration
set rtp+=/usr/bin/fzf

" End of the OPTIONS section 
" }}}





" --- &:MAPPINGS --- : 

let mapleader = " "
inoremap jj <Esc>

" Edit .vimrc Settings
nnoremap <leader>ev :e $MYVIMRC <CR>

" CtrS from both modes and back to Normal
nnoremap <C-s> :w <CR> :Prettier <cr>
inoremap <C-s> <Esc> :w <CR> :Prettier <cr>


" Navigate the splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l


" Remove highlight
nnoremap <Esc> :nohl<CR>

" Show actual Marks
" https://vim.fandom.com/wiki/Using_marks
" nnoremap <C-m> :Marks<CR>

" Keep the selection while indenting
xnoremap <  <gv
xnoremap >  >gv


" --- &:Autocomands ---

" Line highlight, only in Normal mode
autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline



" --- &:Plugins specific Mappings & Conf ---

" &:BuffTabline
nnoremap <tab> :bnext<CR>
nnoremap <s><tab> :bprev<CR>

" &:FzF
" :Files {directory} to search outside

" Find Files (inside the project)
nnoremap <leader>ff :Files<cr>
" Find GitFiles
nnoremap <leader>fg :GFiles<cr>
" Find sometimes opened files
nnoremap <leader>fh :History<cr>
" Search trough all open buffers
nnoremap <leader>sb :Buffers<cr>
" Search trough the content of all open buffers
nnoremap <leader>sl :Lines<cr>
" Search trough the content of the current bufferx
nnoremap <leader>sc :BLines<cr>


" &:BuffLine
" Close a buffer
nnoremap <leader>x :bd <cr>

" &:NerdTree
nnoremap <leader>e :NERDTreeToggle<CR>

" NerdTree Files management
" Hit m when hovering a file/folder
" Pick the needed option: a to add, etc

" &:COC Completion by Tab
" C-n or C-p for next/previous 
inoremap <silent><expr> <tab> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"


" &:coc-yank
" Open yanks list
nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

" --- The &:coc tools mapping & config ---

" &:Prettier
" https://github.com/neoclide/coc-prettier?tab=readme-ov-file 

" Adding the :Prettier command 
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument
" Range format keys
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)


" &:Snippets
" Trigger snippet expand
imap <c-e> <Plug>(coc-snippets-expand)

" &:Emmet
" Expand with <C-y> or <tab>
" Nav <C-n> <C-p>

"  &:Colorscheme Everforest
" Theme. see :help everforest.txt
if has('termguicolors')
set termguicolors
" let g:everforest_better_performance
endif

" For dark versionoc:
 set background=dark

" For light version.

" set background=light

" Set contrast.
" This configuration option should be placed before `colorscheme everforest`.
" Available values: 'hard', 'medium'(default), 'soft'
let g:everforest_background = 'medium'

" For better performance
" let g:everforest_better_performance = 1
colorscheme everforest

